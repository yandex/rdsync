diff --git a/src/config.c b/src/config.c
index 2d4e703d9..c1351d74f 100644
--- a/src/config.c
+++ b/src/config.c
@@ -2526,6 +2526,25 @@ static int updateExtendedRedisCompat(const char **err) {
     return 1;
 }
 
+static int updateReplPaused(const char **err) {
+    UNUSED(err);
+
+    if (server.repl_paused) {
+        if (server.primary_host) {
+            if (server.repl_state == REPL_STATE_CONNECTING || replicaIsInHandshakeState() ||
+                server.repl_state == REPL_STATE_TRANSFER) {
+                cancelReplicationHandshake(0);
+            }
+            if (server.primary) {
+                freeClient(server.primary);
+            }
+            server.repl_state = REPL_STATE_CONNECT;
+        }
+    }
+
+    return 1;
+}
+
 static int updateSighandlerEnabled(const char **err) {
     UNUSED(err);
     if (server.crashlog_enabled)
@@ -3107,6 +3126,7 @@ standardConfig static_configs[] = {
     createBoolConfig("enable-debug-assert", NULL, IMMUTABLE_CONFIG | HIDDEN_CONFIG, server.enable_debug_assert, 0, NULL, NULL),
     createBoolConfig("cluster-slot-stats-enabled", NULL, MODIFIABLE_CONFIG, server.cluster_slot_stats_enabled, 0, NULL, NULL),
     createBoolConfig("hide-user-data-from-log", NULL, MODIFIABLE_CONFIG, server.hide_user_data_from_log, 1, NULL, NULL),
+    createBoolConfig("repl-paused", NULL, MODIFIABLE_CONFIG, server.repl_paused, 0, NULL, updateReplPaused),
 
     /* String Configs */
     createStringConfig("aclfile", NULL, IMMUTABLE_CONFIG, ALLOW_EMPTY_STRING, server.acl_filename, "", NULL, NULL),
diff --git a/src/replication.c b/src/replication.c
index 249c190ea..a1ec23f38 100644
--- a/src/replication.c
+++ b/src/replication.c
@@ -51,7 +51,6 @@ void replicationResurrectProvisionalPrimary(void);
 void replicationSendAck(void);
 int replicaPutOnline(client *replica);
 void replicaStartCommandStream(client *replica);
-int cancelReplicationHandshake(int reconnect);
 void replicationSteadyStateInit(void);
 void setupMainConnForPsync(connection *conn);
 void dualChannelSyncHandleRdbLoadCompletion(void);
@@ -1067,7 +1066,7 @@ void syncCommand(client *c) {
 
     /* Refuse SYNC requests if we are a replica but the link with our primary
      * is not ok... */
-    if (server.primary_host && server.repl_state != REPL_STATE_CONNECTED) {
+    if (server.primary_host && server.repl_state != REPL_STATE_CONNECTED && !server.repl_paused) {
         addReplyError(c, "-NOMASTERLINK Can't SYNC while not connected with my master");
         return;
     }
@@ -4520,7 +4519,7 @@ void replicationCron(void) {
     }
 
     /* Check if we should connect to a PRIMARY */
-    if (server.repl_state == REPL_STATE_CONNECT) {
+    if (server.repl_state == REPL_STATE_CONNECT && !server.repl_paused) {
         serverLog(LL_NOTICE, "Connecting to PRIMARY %s:%d", server.primary_host, server.primary_port);
         connectWithPrimary();
     }
diff --git a/src/server.h b/src/server.h
index fceb2894a..d6dcd98fe 100644
--- a/src/server.h
+++ b/src/server.h
@@ -2095,6 +2095,7 @@ struct valkeyServer {
     /* Synchronous replication. */
     list *clients_waiting_acks; /* Clients waiting in WAIT or WAITAOF. */
     int get_ack_from_replicas;  /* If true we send REPLCONF GETACK. */
+    int repl_paused;            /* If true we don't try to connect to master */
     /* Limits */
     unsigned int maxclients;                    /* Max number of simultaneous clients */
     unsigned long long maxmemory;               /* Max number of memory bytes to use */
@@ -3082,6 +3083,8 @@ void clearFailoverState(void);
 void updateFailoverStatus(void);
 void abortFailover(const char *err);
 const char *getFailoverStateString(void);
+int cancelReplicationHandshake(int reconnect);
+int replicaIsInHandshakeState(void);
 int sendCurrentOffsetToReplica(client *replica);
 void addRdbReplicaToPsyncWait(client *replica);
 
diff --git a/tests/cluster/tests/99-yandex-cloud-patches.tcl b/tests/cluster/tests/99-yandex-cloud-patches.tcl
new file mode 100644
index 000000000..6d0c1007b
--- /dev/null
+++ b/tests/cluster/tests/99-yandex-cloud-patches.tcl
@@ -0,0 +1,48 @@
+# Test Yandex Cloud patches on cluster
+
+source "../tests/includes/init-tests.tcl"
+
+proc kill_clustered_redis {id} {
+    set pid [get_instance_attrib redis $id pid]
+
+    stop_instance $pid
+    set_instance_attrib redis $id pid -1
+    set_instance_attrib redis $id link you_tried_to_talk_with_killed_instance
+
+    # Remove the PID from the list of pids to kill at exit.
+    set ::pids [lsearch -all -inline -not -exact $::pids $pid]
+}
+
+test "Create a 2 node cluster (1 master and 1 replica)" {
+    create_cluster 1 1
+}
+
+test "Cluster is up" {
+    assert_cluster_state ok
+}
+
+test "Instance #1 synced with the master" {
+    wait_for_condition 1000 50 {
+        [RI 1 master_link_status] eq {up}
+    } else {
+        fail "Instance #1 master link status is not up"
+    }
+}
+
+test "Replication pause on instance #1 works" {
+    assert {[R 1 config set repl-paused yes] eq {OK}}
+    wait_for_condition 1000 50 {
+        [RI 1 master_link_status] eq {down}
+    } else {
+        fail "Instance #1 master link status is not down"
+    }
+}
+
+test "Replication resume on instance #1 works" {
+    assert {[R 1 config set repl-paused no] eq {OK}}
+    wait_for_condition 1000 50 {
+        [RI 1 master_link_status] eq {up}
+    } else {
+        fail "Instance #1 master link status is not up"
+    }
+}
diff --git a/tests/integration/yandex-cloud-patches.tcl b/tests/integration/yandex-cloud-patches.tcl
new file mode 100644
index 000000000..a2c9bb949
--- /dev/null
+++ b/tests/integration/yandex-cloud-patches.tcl
@@ -0,0 +1,56 @@
+start_server {tags {"repl network external:skip"}} {
+    set slave [srv 0 client]
+    set slave_host [srv 0 host]
+    set slave_port [srv 0 port]
+    start_server {} {
+        set master_host [srv 0 host]
+        set master_port [srv 0 port]
+
+        # Start the replication process...
+        $slave replicaof $master_host $master_port
+
+        test {Replication pause works} {
+            wait_for_condition 50 1000 {
+                [lindex [$slave role] 0] eq {slave} &&
+                [string match {*master_link_status:up*} [$slave info replication]]
+            } else {
+                fail "Replication did not start"
+            }
+
+            $slave config set repl-paused yes
+
+            wait_for_condition 50 1000 {
+                [lindex [$slave role] 0] eq {slave} &&
+                [string match {*master_link_status:down*} [$slave info replication]]
+            } else {
+                fail "Replication did not enter paused state"
+            }
+        }
+
+        start_server {} {
+            set cascade_slave [srv 0 client]
+
+            $cascade_slave replicaof $slave_host $slave_port
+
+            test {Cascade replication from paused slave works} {
+                wait_for_condition 50 1000 {
+                    [lindex [$cascade_slave role] 0] eq {slave} &&
+                    [string match {*master_link_status:up*} [$cascade_slave info replication]]
+                } else {
+                    fail "Replication did not start"
+                }
+            }
+        }
+
+        test {Replication resume works} {
+            $slave config set repl-paused no
+
+            wait_for_condition 50 1000 {
+                [lindex [$slave role] 0] eq {slave} &&
+                [string match {*master_link_status:up*} [$slave info replication]]
+            } else {
+                fail "Replication did not start after pause"
+            }
+        }
+    }
+}
-- 
2.48.0

